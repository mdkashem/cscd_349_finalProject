package dungeon;




import java.util.Arrays;
import java.util.LinkedList;
import java.util.Random;



	public class Dungeon {

	


	


	public Dungeon(int row, int col) {
		Room[][] dungeon = new Room[row][col];
		
		
	    
    	for(int row1 = 0; row1 < col; row1++) {
    		for(int col1 = 0; col1 < row; col1++) {
    			if(row1 == 0 && col1 == 0) {
    				dungeon[row1][col1] = new Room(1,0,0,1);
    			}
    			if(row1 == 0 && col1 == 4) {
    				dungeon[row1][col1] = new Room(1,1,0,0);
    			}
    			if(row1 == 0) {
    				dungeon[row1][col1] = new Room(1,0,0,0);
    			}
    			if(row1 == 4 && col1 == 0) {
    				dungeon[row1][col1] = new Room(0,0,1,1);
    			}
    			if(row1 == 4 && col1 == 4) {
    				dungeon[row1][col1] = new Room(0,1,1,0);
    			}
    			//dungeon[row1][col1] = new Room(0,0,0,0);
    			
    		}
    	}
    	
    	dungeon.toString();
    	int randoRow = new Random().nextInt(5);
    	int randoCol = new Random().nextInt(5);
    	int count = 0;
    	
    	while(count != 4) {
			if(dungeon[randoRow][randoCol].hasPillar() || dungeon[randoRow][randoCol].hasEntrance() || dungeon[randoRow][randoCol].hasExit()) {
				randoRow = new Random().nextInt(5);
				randoCol = new Random().nextInt(5);
			}
			dungeon[randoRow][randoCol].setPillar(10);
			count++;
		}
    	
    	
	}

	
	public boolean isDoor(int wall) {
		return wall == 1;

    }

	

	public void setSpawn(Room[][] entrance) {

		//this is to make sure that the entrance is placed on the border

		//of the dungeon, and not in the middle.

		int border = new Random().nextInt(5);

		int randoEntry = new Random().nextInt(6);

		//int randoExit = new Random().nextInt(6);


		if(border == 0) {

			entrance[0][randoEntry].getEntrance();

		}

		else if(border == 1) {

			entrance[randoEntry][0].getEntrance();

		}

		else if(border == 2) {

			entrance[5][randoEntry].getEntrance();

		}

		else {

			entrance[randoEntry][5].getEntrance();

		}

		


	}

	

	public void setExitDoor(Room[][] exit) {

		int row = new Random().nextInt(6);

		int col = new Random().nextInt(6);

		

		if(!exit[row][col].hasEntrance()) {

			exit[row][col].getExit();

		}

		else {

			row = new Random().nextInt(6);

			col = new Random().nextInt(6);

			exit[row][col].getExit();

		}

	}

	public void placePillar(Room[][] room) {

		int row = new Random().nextInt(6);

		int col = new Random().nextInt(6);


		int count = 0;

		

		while(count != 4) {

			if(room[row][col].hasPillar() || room[row][col].hasEntrance() || room[row][col].hasExit()) {

				row = new Random().nextInt(6);

				col = new Random().nextInt(6);

			}

			room[row][col].getPillar();

			count++;

		}

		

	}

	

	

	 
	  public String location() {
		  return "";
	  }

	 


	public String toString() {

		return "";



	}

}