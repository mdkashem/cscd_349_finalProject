package dungeon;
import java.util.Random;
import java.util.Scanner;
	public class Dungeon {

		
		private int row;
		private int col;
		
	public Dungeon(int row, int col) {
		
		this.row = row;
		this.col = col;
	}
	
	public Room[][] createDungeon() {
		
		Room[][] dungeon = new Room[this.row][this.col];
		
		for(int row1 = 0; row1 < col; row1++) {
    		for(int col1 = 0; col1 < row; col1++) {
    			//top left corner
    			if(row1 == 0 && col1 == 0) {
    				dungeon[row1][col1] = new Room(1,0,0,1);
    			}
    			//all north walls
    			else if(row1 == 0 && (col1 == 1 || col1 == 2 || col1 == 3)) {
    				dungeon[row1][col1] = new Room(1,0,0,0);
    			}
    			
    			//top right corner
    			else if(row1 == 0 && col1 == 4) {
    				dungeon[row1][col1] = new Room(1,1,0,0);
    			}
    			//all East walls
    			else if(col1 == 4 && (row1 == 1 || row1 == 2 || row1 == 3)) {
    				dungeon[row1][col1] = new Room(0,1,0,0);
    			}
    			
    			//bottom left corner
    			else if(row1 == 4 && col1 == 0) {
    				dungeon[row1][col1] = new Room(0,0,1,1);
    			}
    			//all West walls
    			else if(col1 == 0 && (row1 == 1 || row1 == 2 || row1 == 3)) {
    				dungeon[row1][col1] = new Room(0,0,0,1);
    			}
    			
    			//bottom right corner
    			else if(row1 == 4 && col1 == 4) {
    				dungeon[row1][col1] = new Room(0,1,1,0);
    			}
    			//all South walls
    			else if(row1 == 4 &&  (col1 == 1 || col1 == 2 || col1 == 3)) {
    				dungeon[row1][col1] = new Room(0,0,1,0);
    			}
    			else {
    				dungeon[row1][col1] = new Room(0,0,0,0);
    			}
    			
    			
    			
    			
    		}
    	}
    	
    	//setting entrance and exit
    			dungeon[0][0].map.clear();
    			dungeon[0][0].map.put("Entrance", 1);
    			dungeon[4][4].map.clear();
    			dungeon[4][4].map.put("Exit", 1);
    	
    	//dungeon.toString();
    	int randoRow = new Random().nextInt(5);
    	int randoCol = new Random().nextInt(5);
    	int count = 0;
    	
    	while(count != 4) {
			if(dungeon[randoRow][randoCol].map.containsKey("Pillar") || 
					dungeon[randoRow][randoCol].map.containsKey("Entrance") ||
					dungeon[randoRow][randoCol].map.containsKey("Exit")) {
				
				randoRow = new Random().nextInt(5);
				randoCol = new Random().nextInt(5);
			}
			dungeon[randoRow][randoCol].map.put("Pillar", 1);
			count++;
		}
    	
    	return dungeon;
    	
	}

	
	public boolean isDoor(int wall) {
		return wall == 1;

    }


	
	
//	public void spawn(Hero player, Room[][] dungeon) {
//		dungeon[0][0].setHero(player);
//	}
	
	
	public void enterRoom() {
		
	}
	
	public void playerLocation() {
		
	}
	
	public void printDungeon() {
		
		for(int row1 = 0; row1 < col; row1++) {
    		for(int col1 = 0; col1 < row; col1++) {
    			this.toString();
    		}
		}

	}

}
